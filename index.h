const char MAIN_page[] PROGMEM = R"=====(
	<html><head> <meta charset="UTF-8"/> <meta name="viewport" content="width=device-width, user-scalable=no"> </head><body> <style> div.c{text-align:center;}input[type=range]{-webkit-appearance: none; margin: 10px 0; width: 100%; background-color: #C5CAE9;}input[type=range]:focus{outline: none;}input[type=range]::-webkit-slider-runnable-track{width: 100%; height: 12.8px; cursor: pointer; animate: 0.2s; box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d; background: #5C6BC0; border-radius: 25px; border: 0px solid #000101;}input[type=range]::-webkit-slider-thumb{box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d; border: 0px solid #000000; height: 40px; width: 40px; border-radius: 50%; background: #1A237E; cursor: pointer; -webkit-appearance: none; margin-top: -12.24px;}input[type=range]:focus::-webkit-slider-runnable-track{background: #5C6BC0;}input[type=range]::-moz-range-track{width: 100%; height: 12.8px; cursor: pointer; animate: 0.2s; box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d; background: #5C6BC0; border-radius: 25px; border: 0px solid #000101;}input[type=range]::-moz-range-thumb{box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d; border: 0px solid #000000; height: 20px; width: 39px; border-radius: 7px; background: #070065; cursor: pointer;}input[type=range]::-ms-track{width: 100%; height: 12.8px; cursor: pointer; animate: 0.2s; background: transparent; border-color: transparent; border-width: 39px 0; color: transparent;}input[type=range]::-ms-fill-lower{background: #5C6BC0; border: 0px solid #000101; border-radius: 50px; box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;}input[type=range]::-ms-fill-upper{background: #5C6BC0; border: 0px solid #000101; border-radius: 50px; box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d;}input[type=range]::-ms-thumb{box-shadow: 0px 0px 0px #000000, 0px 0px 0px #0d0d0d; border: 0px solid #000000; height: 20px; width: 39px; border-radius: 7px; background: #1A237E; cursor: pointer;}input[type=range]:focus::-ms-fill-lower{background: #5C6BC0;}input[type=range]:focus::-ms-fill-upper{background: #5C6BC0;}.button{margin-top: 3em; background-color: #4CAF50; /* Green */ border: none; color: white; padding: 15px 32px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px;}</style> <style>body{background-color: #C5CAE9;}.center{padding: 1%; display: flex; align-items: center; justify-content: center;}#color-canvas{max-width: 100%;}#color-view{background-color: rgb(255, 255, 255); height: 8em; width: 8em; -moz-border-radius: 50%; -webkit-border-radius: 50%; border-radius: 50%; display: flex; align-items: center; justify-content: center; position: absolute;}#lightness{margin-top: 3em; width: 90%;}</style> <div class="center"> <div id="color-view"></div><canvas id="color-canvas" width="400px" height="400px"></canvas> </div><div class="center"> <input id="lightness" type="range" min="0" max="100" value="100"> </div><div class="center"> <button class="button" id="send">Valider</button> </div> <div class="c"><h1>FabLab ORE </h1></div><script>function ColorPicker(element){this.element=element; var THIS=this; this.init=function (){this.canvas=document.getElementById('color-canvas'); this.colorView=document.getElementById('color-view'); this.lightness=document.getElementById('lightness'); this.send=document.getElementById('send'); this.color={h: 0, s: 0, l: 0}; this.setColorHSL(0, 0, 100); this.renderColorMap(); this.setupBindings();}; this.setColorHSL=function (h, s, l){THIS.color.h=h; THIS.color.s=s; THIS.color.l=l; THIS.colorView.style.backgroundColor='hsl(' + h + ',' + s + '%,' + l + '%)';}; this.setColorRGB=function (r, g, b){hsl=rgbToHsl(r, g, b); THIS.color.h=hsl[0]; THIS.color.s=hsl[1]; THIS.color.l=hsl[2]; THIS.colorView.style.backgroundColor='hsl(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%)';}; this.getColorHSL=function (){return [THIS.color.h, THIS.color.s, THIS.color.l];}; this.getColorRGB=function (){var c=THIS.colorView.style.backgroundColor; rgb=c.replace(/^(rgb|rgba)\(/, '').replace(/\)$/, '').replace(/\s/g, '').split(','); return [parseInt(rgb[0]), parseInt(rgb[1]), parseInt(rgb[2])];}; this.renderColorMap=function (){var canvas=this.canvas; var ctx=canvas.getContext('2d'); var radius=canvas.width / 2; var toRad=(2 * Math.PI) / 360; var step=1 / radius; ctx.clearRect(0, 0, canvas.width, canvas.height); for (var i=0; i < 360; i +=step){var rad=i * toRad; ctx.strokeStyle='hsl(' + i + ', 100%, 50%)'; ctx.beginPath(); ctx.moveTo(radius, radius); ctx.lineTo(radius + radius * Math.cos(rad), radius + radius * Math.sin(rad)); ctx.stroke();}ctx.fillStyle='rgb(255, 255, 255)'; ctx.beginPath(); ctx.arc(radius, radius, radius * 0, 0, Math.PI * 2, true); ctx.closePath(); ctx.fill();}; this.setupBindings=function (){var canvas=this.canvas; var colorView=this.colorView; var lightness=this.lightness; var setColorRGB=this.setColorRGB; var send=this.send; var ctx=canvas.getContext('2d'); var click=function (e){var originalElement=e.srcElement || e.originalTarget; var ratio=originalElement.height / originalElement.clientHeight; var rect=e.target.getBoundingClientRect(); var x=(e.offsetX || (e.touches[0].clientX - rect.left)) * ratio; var y=(e.offsetY || (e.touches[0].clientY - rect.top)) * ratio; var imgData=ctx.getImageData(parseInt(x), parseInt(y), 1, 1).data; if (imgData[0] !=0 || imgData[1] !=0 || imgData[2] !=0){THIS.setColorRGB(imgData[0], imgData[1], imgData[2]);}lightness.value=50; return false;}; canvas.addEventListener('click', click); canvas.addEventListener('touchstart', click); var clicking=false; var changeLightness=function (e){if (clicking==false) return; var hsl=THIS.getColorHSL(); THIS.setColorHSL(hsl[0], hsl[1], e.target.valueAsNumber);}; lightness.addEventListener('mousemove', changeLightness); lightness.addEventListener('touchmove', changeLightness); lightness.addEventListener('mousedown', function (e){clicking=true; changeLightness(e);}, false); lightness.addEventListener('mouseup', function (e){clicking=false;}, false); lightness.addEventListener('touchstart', function (e){clicking=true; console.log("touchstart"); changeLightness(e);}, false); lightness.addEventListener('touchleave', function (e){clicking=false;}, false); var valideSend=function (e){THIS.sendData();}; send.addEventListener('touchstart', valideSend); send.addEventListener('click', valideSend);}; this.sendData=function (){var rgb=THIS.getColorRGB(); console.log(rgb); var http=new XMLHttpRequest(); var url="/color"; var params="r=" + rgb[0] + "&g=" + rgb[1] + "&b=" + rgb[2]; http.open("POST", url, true); http.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); /*http.onreadystatechange=function(){Call a function when the state changes. if(http.readyState==4 && http.status==200){alert(http.responseText);}}*/ http.send(params);}; this.init();}; new ColorPicker(document.querySelector('.color-space')); function rgbToHsl(r, g, b){r /=255, g /=255, b /=255; var max=Math.max(r, g, b), min=Math.min(r, g, b); var h, s, l=(max + min) / 2; if (max==min){h=s=0;}else{var d=max - min; s=l > 0.5 ? d / (2 - max - min) : d / (max + min); switch (max){case r: h=(g - b) / d + (g < b ? 6 : 0); break; case g: h=(b - r) / d + 2; break; case b: h=(r - g) / d + 4; break;}h /=6;}return [Math.floor(h * 360), Math.floor(s * 100), Math.floor(l * 100)];}; </script></body></html>
)=====";
